---
description: SPNKr project directory structure and file organization guide
globs: **/*
alwaysApply: false
---

# SPNKr Project Structure Guide

This document outlines the directory structure and important files in the SPNKr project - a Python SDK for the Halo Infinite web API with a small Flask+HTML web app.

## Root Directory Files

```
├── README.md              # Project overview, installation, and usage instructions
├── LICENSE                # MIT license file
├── CHANGES.md             # Changelog documenting version history and updates
├── MANIFEST.in            # Controls which files are included in the Python package distribution
├── pyproject.toml         # Python project configuration (dependencies, build settings, tools)
├── uv.lock                # Lock file for UV package manager (exact dependency versions)
├── mkdocs.yml             # MkDocs configuration for generating project documentation
├── .env.example           # Example environment variables for local development
└── .env                   # Local secrets (ignored); used by web app and scripts
```

## Main Package Directory (`spnkr/`)

The core Python package containing all API functionality:

```
spnkr/
├── __init__.py            # Package entry point - exports main classes and functions
├── client.py              # HaloInfiniteClient - main API client class
├── errors.py              # Custom exception classes for API errors
├── responses.py           # Base response handling and pagination utilities
├── extras.py              # Additional utility functions and helpers
└── xuid.py                # Xbox User ID utilities and conversions
```

### Authentication Module (`spnkr/auth/`)

Handles Xbox Live and Halo Infinite authentication flows:

```
auth/
├── __init__.py            # Exports authentication classes and functions
├── app.py                 # AzureApp class for OAuth2 application configuration
├── core.py                # authenticate_player, refresh_player_tokens
├── halo.py                # Halo-specific token classes (SpartanToken, ClearanceToken)
├── oauth.py               # OAuth2 flow implementation for Xbox Live
├── player.py              # AuthenticatedPlayer class storing user credentials
└── xbox.py                # Xbox Live authentication utilities
```

### API Services (`spnkr/services/`)

Service classes for different API endpoints:

```
services/
├── __init__.py            # Exports all service classes
├── base.py                # BaseService - common functionality for all services
├── discovery_ugc.py       # User-generated content discovery (maps, game modes)
├── economy.py             # Store and player customization data
├── gamecms_hacs.py        # Game content management (medals, seasons)
├── profile.py             # User profile data (XUIDs, gamertags, Spartan appearance)
├── skill.py               # Skill rating data (CSR, MMR by playlist/match)
└── stats.py               # Match statistics and game history
```

### Data Models (`spnkr/models/`)

Pydantic models for API response data structures:

```
models/
├── __init__.py
├── base.py
├── discovery_ugc.py
├── economy.py
├── gamecms_hacs.py
├── profile.py
├── refdata.py
├── skill.py
├── stats.py
└── types.py
```

### Film Analysis (`spnkr/film/`)

Tools for analyzing Halo Infinite film/replay files:

```
film/
├── __init__.py
├── api.py
├── highlight_events.py
├── medals.py
└── medal_codes.json
```

## Web App (`web/` + `web_server.py`)

A lightweight Flask API and static front-end to view service records and CSR.

```
web_server.py          # Flask server: loads .env, exposes /api/service-record and serves static files
web/
├── index.html         # Dark UI with search, player header, playlist tabs, metric tiles
├── styles.css         # Dark theme, responsive layout, metric/tabs styles
└── script.js          # Fetches data, renders tabs/metrics, search handling
```

- Server reads environment via `.env` (see `.env.example`) with variables:
  - `SPNKR_CLIENT_ID`, `SPNKR_CLIENT_SECRET`, `SPNKR_REDIRECT_URI`, `SPNKR_REFRESH_TOKEN`
  - Optional: `PORT`, `FLASK_DEBUG`, `CORS_ORIGINS`, `DEFAULT_GAMERTAG`

## Scripts (`scripts/`)

Example scripts and utilities for common tasks (now env-driven):

```
scripts/
├── authenticate.py         # Obtain a refresh token (interactive) using env credentials
├── get_refresh_token.py    # Alternative flow to print refresh token (interactive)
├── get_gamertags.py        # Example: fetch your profile using tokens from env
└── download_film_by_match.py  # Example: check film availability for a match
```

## Documentation (`docs/`)

MkDocs-based documentation source files (unchanged).

## Testing (`tests/`)

Comprehensive unit/integration tests (unchanged).

## Configuration Files

- **`.cursor/rules/`** - Cursor rules for code and documentation consistency
- **`pyproject.toml`** - Project config (deps, linting, tox)
- **`uv.lock`** - Reproducible installs
- **`.env.example` / `.env`** - Local environment settings (never commit real secrets)

## Patterns & Notes

- **Async-first**: aiohttp ClientSession shared per request; rate limits per service
- **Tokens**: refresh token → spartan/clearance headers; tokens cached per request currently
- **Front-end**: static files; CSR tabs per playlist; metric tiles for current/season/all-time CSR
- **Env normalization**: the server trims quotes/whitespace in env values to prevent invalid_grant

This structure supports a maintainable SDK with a simple, modern web UI for quick inspection of player data.