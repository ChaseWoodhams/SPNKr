---
description: SPNKr technology stack, dependency versions, and best practices
globs: pyproject.toml
alwaysApply: false
---

# SPNKr Technology Stack & Dependencies

This document outlines the complete technology stack used in the SPNKr project, including dependency versions and best practices for managing them.

## Python Runtime

- **Python Version**: `>=3.11`
- **Supported Versions**: 3.11, 3.12, 3.13 (via tox configuration)
- **Best Practice**: Python 3.11+ provides excellent async performance and modern features. The project correctly supports multiple versions for compatibility.

## Core Production Dependencies

### HTTP & Networking
```toml
aiohttp = ">=3.9,<4.0"
aiolimiter = "~=1.0"
```

- **aiohttp**: Asynchronous HTTP client/server framework
  - **Version Strategy**: Range `>=3.9,<4.0` prevents major breaking changes
  - **Best Practice**: ✅ Good - aiohttp 3.9+ includes security fixes and performance improvements

- **aiolimiter**: Rate limiting for asyncio applications
  - **Version Strategy**: Compatible release `~=1.0`
  - **Best Practice**: ✅ Excellent - Prevents breaking changes while allowing bug fixes

### Data Validation & Parsing
```toml
pydantic = ">=2.8,<3.0"
bitstring = "~=4.0"
```

- **pydantic**: Data validation using Python type annotations
  - **Best Practice**: ✅ Excellent - Pydantic v2 is fast and modern

- **bitstring**: Binary manipulation used for film parsing

## Web App (Backend)

- **Flask**: Simple HTTP server to expose a small API and serve static files
- **flask-cors**: CORS management
- **python-dotenv**: Loads `.env` for local development

Best practices:
- Read credentials from environment only (no hardcoding)
- Normalize env values (strip quotes/whitespace) to avoid `invalid_grant`
- Run production with a WSGI server (gunicorn/waitress) and `debug=False`
- Restrict CORS in production via `CORS_ORIGINS`

## Web App (Frontend)

- Static HTML/CSS/JS (no framework)
- Dark theme styling; metric tiles; playlist tabs
- Fetches `/api/service-record` and renders service record + CSR

## Optional Dependencies

```toml
[project.optional-dependencies]
cache = ["aiohttp-client-cache>=0.10"]
```

- **aiohttp-client-cache**: Optional caching layer

## Development Dependencies

### Testing Framework
```toml
pytest = "==8.4.1"
pytest-asyncio = ">=1.1.0"
python-dotenv = "==1.1.1"
coverage = "==7.10.0"
```

### Code Quality & Linting
```toml
ruff = "==0.12.5"
```

### Documentation
```toml
mkdocs = "==1.6.1"
mkdocstrings[python] = "==0.30.0"
mkdocs-material = "==9.6.15"
```

### Testing Infrastructure
```toml
tox = ">=4.28.1"
```

## Build System

```toml
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"
```

## Package Manager

- **UV**: Modern Python package manager (`uv.lock`)

## Environment & Secrets

- `.env.example` documents required env vars:
  - `SPNKR_CLIENT_ID`, `SPNKR_CLIENT_SECRET`, `SPNKR_REDIRECT_URI`, `SPNKR_REFRESH_TOKEN`
  - optional: `DEFAULT_GAMERTAG`, `PORT`, `FLASK_DEBUG`, `CORS_ORIGINS`
- `.env` is local-only (do not commit). In production, use a secrets manager or platform env vars.

## Version Management Best Practices

- Use upper bounds to prevent breaking changes
- Audit regularly (`uv audit`) and review monthly (`uv outdated`)
- Prefer ranges for dev tooling when feasible (e.g., `pytest>=8.4.1,<9.0`)

## Architecture Alignment

- **Async-First**: aiohttp + rate limiting per service
- **Type Safety**: Pydantic models for all responses
- **Small Web Surface**: Flask API delegates to SDK; static front-end

## Security Considerations

- Keep refresh tokens server-side; never expose to the browser
- Restrict CORS in production
- Do not log secrets; redact tokens in error logs